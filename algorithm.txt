create an empty array of type const called input, do not assign an initial value

create a variable of type const called numbers equal to all the number buttons (querySelectorAll())

create a variable of type const called operators equal to all the operator buttons (querySelectorAll())

create a variable of type const called display, equal to the display element (querySelector())

create a variable of type const called del, equal to the DEL element (querySelector())

create a variable of type const called clear, equal to the AC element (querySelector())

create a variable of type const called ans, equal to the ans element (querySelector)

create a variable of type const called equal, set it equal to the equal element

create a variable of type let called numOperations, assign an initial value of 0. This will store how many operations the user has input.

create a variable of type let called solved, assign an initial value of false. This will be used to check if the display should be reset or not. 

create a variable of type let called answer, do not assign an initial value. This variable will store the answer from the previous user input. 

create a variable of type const called colours, assign an initial value of all the colour pickers (querySelectorAll('.colourP'))



Add the event listener to each number button, when the button is clicked call userNumber() 

Add the event listener to each operator button, when the button is clicked, call userOperator()

Add the event listener to the delete button, when the button is clicked, call delete1()

Add the event listener to the clear button, when the button is clicked, call clearAll()
 
Add the event listener to the equal button, when the button is clicked, call the function evaluate()

Add the event listener to each colour picker, when the button is clicked call the function changeColour(). 

Add the event listener to the window, if a key is hit

    -> Check to see if a number was hit
        -> if so, call userNumber

    -> Check to see if a operator was hit
        -> call userOperator

    -> Check to see if * was hit
        -> call userOperator passing it the multiplication button

    -> check to see if % or / was hit
        ->call user operator, passing it the division button

    -> check if the equal key was hit
        -> call evaluate()

    -> check if the backspace key was hit 
        -> call delete1()

     -> check if the delete key was hit 
        -> call clearAll(0)


function: userNumber:
updates display and input array on user number input
    
    ->If the input[numOperations] hasn't been defined yet
        -> set input to an object with a number and operator key

    ->If a decimal is chosen and the string already contains a decimal, return

    -> if solved is true:
        -> set display equal to number selected
        -> set solved to false
    
    -> otherwise:
        ->update the display
    
    -> set input plus/equal to the number selected

Function userOperators:
updates operators when a operator key is pressed

    ->check to see if the equation was solved -> Allow an operator to be directly applied to answer 

    -> if a number has not been selected since the last operation, break 

    -> Update the display

    -> set the input[numOperations] operator object equal to the operator that was clicked

    -> increment the number of operations 

Fundtion delete1()
delete the previous user input from the display

    ->If nothing has been input, return

    -> remove last character from display

    -> if the input[numOperations] is undefined, the previous input was an operator
        ->decrement number of operations
        -> empty previous operator
    
    -> else if the user deletes back through a full number to an operator, the number will be empty 
        ->decrement number of operations
        -> empty previous operator
    
    -> otherwise slice out the previous number input 

function clearAll()
Clear entire display and input array

    -> clear entire display
    -> empty the input
    -> set number of operations to zero

function getAnswer()
Displays answer and adds it as the most recent number in input array

    -> if a number has been selected since the last operation, break 

    -> if solved
        ->set display equal to answer
        -> set solved to false
    -> else
        -> update the display

    -> set input to an object with a number and operator key
    -> set input number object equal to answer

function: evaluate -> evaluates the input 

 ->create a variable of type let called sum, provide it an initial value of null
 ->create a variable of type let called firstOperation, provide it an initial value of true. Variable to see if the first addition/subtraction was done

 
 for loop for exponent, while counter is less than the lengoth of input - 1, increment the counter: 

    -> if the input of operator i is exponent
        ->raise the number of i to the power of number of i + 1, storing the output in the next number (i+1)
        ->set the current number to null (so that we can skip over it in future steps)

 
 for loop for multiplication/division, set counter to zero, while counter is less than the length of input - 1, increment the counter:

    -> if the current number is null (it was already raised to the exponent)
        -> skip over

    -> create a variable of type let called j, set it equal to the counter + 1. Variable will be used to check for the next non-null number

    -> while input number of j is null
        -> increment j
    
    -> if the input operator of i is multiplication 
        -> perform multiplication, storing the product in the next number (j)
        -> set the current number to null (so that we can skip over it in the addition/subtraction section)

    -> else if the input operator of i is division
        -> perform division, storing the product in the next number (j)
        -> set the current number to null (so that we can skip over it in the addition/subtraction section)


 for loop for addition/subtraction, set counter to zero, while counter is less than the length of input - 1, increment the counter:

    -> if the current number is null (it was already raised to the exponent or multiplied/divided)
        -> skip over

    -> create a variable of type let called j, set it equal to the counter + 1. Variable will be used to check for the next non-null number

    -> while input number of j is null
        -> increment j

    -> if current input operator is addition

        -> if it is the first operation
            ->add both the current number and next non null number to the sum
            ->change firstOperation to false
    
        -> else
            ->add the next non null number to the sum
    
    -> else if current operator is subtraction
        
        -> if it is the first operation
            ->add the current number and subtract the next non null number to the sum
            ->change firstOperation to false
    
        -> else
            ->subtract the next non null number to the sum


if there was no addition or subtraction
    -> set the sum equal to the last number 


if the answer is infinity
    -> display 'Math Error'

otherwise: 
    -> set answer equal to the sum round to two decimal places 
    -> display answer


empty the input 

set the number of operations to zero

set the value of solved equal to true


function changeColour -> update colours of the correct elements based on colour picker decision
    if background colour is changed
        -> change background colour

    else if calculator colour is changed
        -> update calculator colourP
    
    else if button colour is changed
        -> update button colour 
        -> update display colour

    else if font colour is changed
        -> update button font colour 
        -> update display font colour 