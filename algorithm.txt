create an empty array of type const called input, do not assign an initial value

create a variable of type const called numbers equal to all the number buttons (querySelectorAll())

create a variable of type const called operators equal to all the operator buttons (querySelectorAll())

create a variable of type const called display, equal to the display element (querySelector())

create a variable of type const called del, equal to the DEL element (querySelector())

create a variable of type const called clear, equal to the AC element (querySelector())

create a variable of type const called equal, set it equal to the equal element

create a variable of type let called numOperations, assign an initial value of 0. This will store how many operations the user has input.


Add the event listener to each number button, when the button is clicked:
 -> update the display
 -> if the input[numOperations] hasn't been defined yet, set it to an object with a number and operator key
 -> set the input[numOperations] number object plus/equal to the number that was clicked 

Add the event listener to each operator button, when the button is clicked:
 -> if a number has not been selected since the last operation, break 
 -> update the display
 -> set the input[numOperations] operator object equal to the operator that was clicked
 -> increment numOperations
 

Add the event listener to the delete button, when the button is clicked: 
-> delete the previous user input from the display
-> delete the value from the input array 
    -> will need to check if it is an operator or number input 

Add the event listener to the clear button, when the button is clicked:
-> clear the entire display
-> empty input array
-> set the number of operations to zero
 

Add the event listener to the equal button, when the button is clicked, call the function evaluate()


function: evaluate -> evaluates the input 

 ->create a variable of type let called sum, provide it an initial value of null
 ->create a variable of type let called firstOperation, provide it an initial value of true. Variable to see if the first addition/subtraction was done

 for loop for multiplication/division, set counter to zero, while counter is less than the length of input - 1, increment the counter:

    -> if the input operator of i is multiplication 
        -> perform multiplication, storing the product in the next number
        -> set the current number to null (so that we can skip over it in the addition/subtraction section)

    -> else if the input operator of i is division
         -> perform division, storing the product in the next number
        -> set the current number to null (so that we can skip over it in the addition/subtraction section)


 for loop for addition/subtraction, set counter to zero, while counter is less than the length of input - 1, increment the counter:

    -> if the current number is null (it was already multiplied/divided)
        -> skip over

    -> create a variable of type let called j, set it equal to the counter + 1. Variable will be used to check for the next non-null number

    -> while input number of j is null
        -> increment j

    -> if current input operator is addition

        -> if it is the first operation
            ->add both the current number and next non null number to the sum
            ->change firstOperation to false
    
        -> else
            ->add the next non null number to the sum
    
    -> else if current operator is subtraction
        
        -> if it is the first operation
            ->add the current number and subtract the next non null number to the sum
            ->change firstOperation to false
    
        -> else
            ->subtract the next non null number to the sum


if there was no addition or subtraction
    -> set the sum equal to the last number 

round the sum to two decimal places and display it 

empty the input 

set the number of operations to zero
